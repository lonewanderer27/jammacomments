import {
  Button,
  Container,
  Input,
  Row,
  Spacer,
  Text,
  Textarea,
} from "@nextui-org/react";

import Comment from "../components/comment";
import Head from "next/head";
import InputNewComment from "../components/inputNewComment";
import { getComments } from "../utils/database";
import { useState } from "react";

export default function Home(props) {
  const [reset, setReset] = useState(0);
  const [comments, setComments] = useState(() => props.comments);

  console.log("Comments: ");
  console.log(comments);

  function removeComment(commentKey) {
    console.log("removing comment");
    let filteredComments = comments;
    Object.entries(filteredComments).forEach(([key, value]) => {
      if (key === commentKey) {
        filteredComments[key]["deleted"] = "True";
      }
    });

    setComments(() => filteredComments);
    setReset((prev) => prev + 1);
  }

  function addComment(commentKey, data) {
    console.log("adding comment");
    let newComments = comments;
    newComments[commentKey] = data;
    setComments(() => newComments);
    setReset((prev) => prev + 1);
  }

  return (
    <>
      <Head>
        <title>JAMMA Comments</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <InputNewComment addComment={addComment} />
      <Container gap={1} fluid css={{ fontFamily: "Roboto" }}>
        <Spacer y={1} />
        <Text h3>{Object.keys(comments).length} Responses:</Text>
        {Object.entries(comments).map((value, index) => {
          const key = value[0];
          const data = value[1];
          const deleted = data.deleted;

          if (!deleted || deleted == "False") {
            return (
              <>
                {
                  <Row key={"r" + key}>
                    <Comment
                      commentKey={Object.keys(comments)[index]}
                      data={data}
                      removeComment={removeComment}
                    />
                  </Row>
                }
                <Spacer y={1} />
              </>
            );
          }
        })}
      </Container>
    </>
  );
}

export async function getServerSideProps() {
  const [success, comments, error] = await getComments();

  return {
    props: {
      comments: comments,
    },
  };
}
